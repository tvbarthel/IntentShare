apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: '../config/quality.gradle'

group = 'fr.tvbarthel.intentshare'
version = rootProject.ext.versionName

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    resourcePrefix 'isl_'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testImplementation 'org.robolectric:robolectric:3.0'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def bintrayUser = properties.getProperty('bintray.user')
def bintrayKey = properties.getProperty('bintray.apikey')

bintray {
    user = bintrayUser
    key = bintrayKey


    configurations = ['archives'] //When uploading configuration files

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'IntentShare'
        desc = 'IntentShare is a light open-source library that improves the sharing experience of their Android applications.'
        websiteUrl = 'https://github.com/tvbarthel/IntentShare'
        issueTrackerUrl = 'https://github.com/tvbarthel/IntentShare/issues'
        vcsUrl = 'https://github.com/tvbarthel/IntentShare.git'
        licenses = ['Apache-2.0']
        labels = ['android', 'intent', 'sharing', 'share']
        publicDownloadNumbers = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }

    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'IntentShare'
                url 'https://github.com/tvbarthel/IntentShare'
                description 'IntentShare is a light open-source library that improves the sharing experience of their Android applications.'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'tbarthel-fr'
                        name 'Thomas Barthelemy'
                        email 'thomas.barthelemy.utc@gmail.com'
                    }
                    developer {
                        id 'vbarthel-fr'
                        name 'Vincent Barthelemy'
                        email 'vincent.barthelemy.perso@gmail.com'
                    }
                }
                scm {
                    connection 'https://github.com/tvbarthel/IntentShare.git'
                    developerConnection 'https://github.com/tvbarthel/IntentShare.git'
                    url 'https://github.com/tvbarthel/IntentShare'

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
